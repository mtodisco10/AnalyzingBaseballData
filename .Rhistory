salesforce_data$close_date <- as.Date(salesforce_data$close_date)
salesforce_data$history_date <- as.Date(salesforce_data$created)
#Where there is no data for the lead_source and opp_type fields, replace with 'None'
#Better for the filters/graphs/tables
salesforce_data$lead_source[is.na(salesforce_data$lead_source)] <- 'None'
salesforce_data$opp_type[is.na(salesforce_data$opp_type)] <- 'None'
#Opportunity Info
#Group the salesforce data so that each row is only looking at an opportunity - created pair.
#This collapses multiple contacts tied to 1 opportunity and multiple changes to opportunity history in a single day (takes the latest change)
opportunities <- salesforce_data %>%
group_by(opportunity_id, history_date) %>%
filter(created == max(created)) %>%
summarise(opportunity_history_id = max(opportunity_history_id), name = max(opp_name), created = max(created), created_by_id = max(created_by_id),
stage_name = max(stage_name), amount = max(amount), probability = max(probability), expected_revenue = max(expected_revenue), create_date = max(create_date),close_date = max(close_date), is_closed = max(is_closed), is_won = max(is_won), is_deleted = max(is_deleted), lead_source = max(lead_source), opp_type = max(opp_type))
#Put opportunities into a dataframe and order by 1) name 2) created date
opportunities <- data.frame(opportunities[with(opportunities, order(name,created)),])
#Closed Opportunity Info
#Subset the opportunities dataframe for 1) only closed opportunities 2) the row with its last created date
closed_opps <- data.frame(subset(opportunities, is_closed == 't') %>%
group_by(opportunity_id) %>%
filter(created == max(created)))
#Add age_to_close field (num day from opp open to opp closed)
closed_opps$age_to_close <- as.numeric(closed_opps$close_date - closed_opps$create_date)
#Fill in na's with 0's for amount and probability.  Calculating missing expected revenue.
closed_opps$amount[is.na(closed_opps$amount)] <- 0
closed_opps$probability[is.na(closed_opps$probability)] <- 0
closed_opps$expected_revenue[is.na(closed_opps$expected_revenue)] <- closed_opps$amount[is.na(closed_opps$expected_revenue)] * closed_opps$probability[is.na(closed_opps$expected_revenue)]
#Add field opp_stage which determines will be 1 of 3 options 1) Open 2) Closed Won 3) Closed Lost
closed_opps$opp_stage <- ifelse(closed_opps$is_won == 't', 'Closed Won', 'Closed Lost')
#We'll add Open to the field when we look at the open opportunities
#Segmenting Closed-Won & Closed-Lost Opps
closed_won_opps <- subset(closed_opps, is_won == 't')
closed_won_opps <- closed_won_opps[with(closed_won_opps, order(-expected_revenue)),]
closed_lost_opps <- subset(closed_opps, is_won == 'f')
closed_lost_opps <- closed_lost_opps[with(closed_lost_opps, order(expected_revenue)),]
#List of unique opportunity names which will be used to loop through
opportunity_list <- unique(opportunities$opportunity_id)
#Steps
# 1) Loop through the list of opportunities
# 2) Subset the opportunities dataframe by that opportunity id
# 3) Create a date sequence from the start of that opportunity until today
# 4) Join the date sequence with the subsetted data
# 5) Fill in the fields using the last observed data point
# 6) Add new subsetted dataframe to the list of dataframes
# 7) Row bind the list of dataframes to get 1 dataframe
salesforce_df_opp_list <- list()
opp_counter <- 0
for(i in opportunity_list) {
name <- paste0('opp', opp_counter, sep = '')
subset_data <- subset(opportunities, opportunity_id == i)
subset_date_seq <- ifelse(subset_data$is_closed[1] == 't',data.frame(seq(as.Date(min(subset_data$created)),as.Date(max(subset_data$created)),1)),data.frame(seq(as.Date(min(subset_data$created)),Sys.Date(),1)))
names(subset_date_seq) <- 'created'
subset_data$created <- as.Date(subset_data$created)
subset_df <- left_join(data.frame(subset_date_seq), subset_data, by=c("created"))
subset_df <- subset_df %>% fill(name, opportunity_id, opportunity_history_id, created_by_id, stage_name, lead_source, opp_type, create_date, close_date, is_closed, is_won, is_deleted)
subset_df$amount <- na.locf(subset_df$amount, na.rm = FALSE)
subset_df$probability <- na.locf(subset_df$probability, na.rm = FALSE)
subset_df$expected_revenue <- na.locf(subset_df$expected_revenue, na.rm = FALSE)
salesforce_df_opp_list[[name]] <- subset_df
opp_counter = opp_counter + 1
}
salesforce_df <- do.call("rbind", salesforce_df_opp_list)
#Filling in na's with 0's and getting missing expected revenue
salesforce_df$amount[is.na(salesforce_df$amount)] <- 0
salesforce_df$probability[is.na(salesforce_df$probability)] <- 0
salesforce_df$expected_revenue[is.na(salesforce_df$expected_revenue)] <- salesforce_df$amount[is.na(salesforce_df$expected_revenue)] * salesforce_df$probability[is.na(salesforce_df$expected_revenue)]
#Join the closed opportunities df to get the opp_stage field.
salesforce_df <- left_join(salesforce_df, closed_opps[,c('opportunity_history_id', 'opp_stage')], by=c("opportunity_history_id"))
#If na then then opp is not closed at that point in time.  Thus mark it as open.
salesforce_df$opp_stage[is.na(salesforce_df$opp_stage)] <- 'Open'
salesforce_df <- salesforce_df[with(salesforce_df, order(history_date)),]
splash_salesforce_df <- rbind(splash_salesforce_df, salesforce_df)
splash_salesforce_df <- subset(splash_salesforce_df, select = -c(history_date))
write.csv(splash_salesforce_df, '/Users/MikeTodisco/Documents/splash_salesforce_df.csv', row.names = FALSE)
source('~/Documents/shiny_to_periscope/ROI_data_pull.R', echo=TRUE)
options(shiny.sanitize.errors = TRUE)
library(googleVis)
library(ggvis)
library(plotly)
library(scales)
library(dplyr)
library(ggplot2)
library(plotly)
library(redshift)
library(imputeTS)
library(tidyr)
library(scales)
library(zoo)
library(RColorBrewer)
#Query the Redshift DB
cat('Connecting to the DB \n')
#conn <- redshift.connect(paste0("jdbc:postgresql://", Sys.getenv('DB_HOST'), ":", Sys.getenv('DB_PORT'), "/", Sys.getenv('DB_NAME'), "?tcpKeepAlive=true"), Sys.getenv('DB_USER'), Sys.getenv('DB_PASSWORD'))
conn <- redshift.connect("jdbc:postgresql://dev-test.cb12gmxpnpv3.us-east-1.redshift.amazonaws.com:5439/splash",
"splash", "S1eKLg5d6HHv2VhLgorBk8pOx4GXIL")
event_query <- function(event_id) {
cat('Event Query \n')
return(dbGetQuery(conn,
paste("select
e.title
, e.event_start
, gl.status
, gl.invited_dt as invite_date
, gl.rsvp_yes_dt as rsvp_date
, gl.checkin_dt as checked_in_date
from f_guest_list gl
join events e on e.id = gl.event_id
where gl.event_id =", event_id, "
and gl.is_deleted = 'false'
and e.organization_id = 1005")))
}
salesforce_query <- function(event_query, event_id) {
cat('Salesforce Query \n')
return(dbGetQuery(conn,
paste("select gl.salesforce_contact_id
, o.name
, a.name as account_name
, o.opportunity_id
, oh.opportunity_history_id
, o.lead_source
, o.type as opp_type
, oh.created
, oh.stage_name
, oh.amount
, oh.probability
, oh.expected_revenue
, o.created as opened_date
, o.close_date
, o.is_closed
, o.is_won
, o.is_deleted
, gl.invited_dt as invite_date
, gl.rsvp_yes_dt as rsvp_date
, gl.checkin_dt as checkin_date
from f_guest_list gl
join sfdc_contact c on c.contact_id = gl.salesforce_contact_id
join sfdc_account a on a.account_id = c.account_id
join sfdc_opportunity o on o.account_id = a.account_id
join sfdc_opportunity_history oh on oh.opportunity_id = o.opportunity_id
where gl.event_id =", event_id,
"and gl.organization_id = 1005
and gl.organization_id = c.splash_org_id
and gl.is_deleted = 'false' and o.created >=",
paste0("'",as.character(as.Date(event_query$event_start[1]) - 365),"'"),
"and o.created <=",
paste0("'",as.character(as.Date(event_query$event_start[1]) + 30),"'"),
"order by o.name, oh.created")))
}
global_func <- function(event_query, salesforce_query){
#Define functions to determine min and max dates of an opportunity with multiple contacts
my.min <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA)
my.max <- function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA)
#Finding event info
#Event Title used for the header of the dashboard
#Event start used for the first value box as well as plotting
event_info <- data.frame(unique(event_query[c('title', 'event_start')]))
event_info$event_start <- as.Date(event_info$event_start)
#Cleaning the salesforce query
#Save the salesforce query to a new object "salesforce_data" and order by 1) opportunity 2) opportunity history created date
salesforce_data <- salesforce_query[with(salesforce_query, order(name,created)),]
#Convert all date fields from characters to dates
salesforce_data$opened_date <- as.Date(salesforce_data$opened_date)
salesforce_data$invite_date <- as.Date(salesforce_data$invite_date)
salesforce_data$rsvp_date <- as.Date(salesforce_data$rsvp_date)
salesforce_data$checkin_date <- as.Date(salesforce_data$checkin_date)
salesforce_data$created_date <- as.Date(salesforce_data$created)
salesforce_data$close_date <- as.Date(salesforce_data$close_date)
#Rename the "created" columns for joining purposes later
colnames(salesforce_data)[8] <- 'created_stamp'
colnames(salesforce_data)[21] <- 'created'
#Where there is no data for the lead_source and opp_type fields, replace with 'None'
#Better for the filters/graphs/tables
salesforce_data$lead_source[is.na(salesforce_data$lead_source)] <- 'None'
salesforce_data$opp_type[is.na(salesforce_data$opp_type)] <- 'None'
#Opportunity Info
#Group the salesforce data so that each row is only looking at an opportunity - created pair.
#This collapses multiple contacts tied to 1 opportunity and multiple changes to opportunity history in a single day (takes the latest change)
opportunities <- salesforce_data %>%
select(account_name, name, opportunity_id, opportunity_history_id, lead_source, opp_type, opened_date, created_stamp, created, close_date, invite_date, rsvp_date, checkin_date, stage_name, amount, probability, expected_revenue, is_closed, is_won) %>%
group_by(account_name, name, opportunity_id, lead_source, opp_type, opened_date, created, close_date, is_closed, is_won) %>%
filter(created_stamp == max(created_stamp)) %>%
summarise(opportunity_history_id = max(opportunity_history_id), stage_name = max(stage_name), invite_date = min(invite_date, na.rm = TRUE),
rsvp_date = my.min(rsvp_date), checkin_date = my.min(checkin_date),
amount = max(amount), probability = max(probability), expected_revenue = max(expected_revenue))
opportunities$rsvp_date <- as.Date(opportunities$rsvp_date)
opportunities$checkin_date <- as.Date(opportunities$checkin_date)
#Put opportunities into a dataframe and order by 1) name 2) created date
opportunities <- data.frame(opportunities[with(opportunities, order(name,created)),])
#Remove Opportunities where RSVP Date is null
opportunities <- opportunities[!is.na(opportunities$rsvp_date),]
#Remove Opportunities Closed Before Their RSVP Date
opportunities <- subset(opportunities, opportunities$is_closed == 'f' | (opportunities$is_closed == 't' & opportunities$close_date >= opportunities$rsvp_date))
#Determining New vs Influenced
#New == Opportunity Created After RSVP (And less than 30 days after the event)
#Influenced == Opportunity was Already Created at time of RSVP
opportunities$attribution_type <- ifelse(opportunities$rsvp_date <= opportunities$opened_date, 'New', 'Influenced')
#Closed Opportunity Info
#Subset the opportunities dataframe for 1) only closed opportunities 2) the row with its last created date
closed_opps <- data.frame(subset(opportunities, is_closed == 't') %>%
group_by(opportunity_id) %>%
filter(created == max(created)))
#Add age_to_close field (num day from opp open to opp closed)
closed_opps$age_to_close <- as.numeric(closed_opps$close_date - closed_opps$opened_date)
#Add column for attended
closed_opps$attended <- ifelse(is.na(closed_opps$checkin_date), 'No', 'Yes')
#Fill in na's with 0's for amount and probability.  Calculating missing expected revenue.
closed_opps$amount[is.na(closed_opps$amount)] <- 0
closed_opps$probability[is.na(closed_opps$probability)] <- 0
closed_opps$expected_revenue[is.na(closed_opps$expected_revenue)] <- closed_opps$amount[is.na(closed_opps$expected_revenue)] * closed_opps$probability[is.na(closed_opps$expected_revenue)]
#Add field opp_stage which determines will be 1 of 3 options 1) Open 2) Closed Won 3) Closed Lost
closed_opps$opp_stage <- ifelse(closed_opps$is_won == 't', 'Closed Won', 'Closed Lost')
#We'll add Open to the field when we look at the open opportunities
#Segmenting Closed-Won & Closed-Lost Opps
closed_won_opps <- subset(closed_opps, is_won == 't')
closed_won_opps <- closed_won_opps[with(closed_won_opps, order(-expected_revenue)),]
closed_lost_opps <- subset(closed_opps, is_won == 'f')
closed_lost_opps <- closed_lost_opps[with(closed_lost_opps, order(expected_revenue)),]
#Creating the DataFrame for All Opportunities
#List of unique opportunity names which will be used to loop through
opportunity_list <- unique(opportunities$opportunity_id)
#Steps
# 1) Loop through the list of opportunities
# 2) Subset the opportunities dataframe by that opportunity id
# 3) Create a date sequence from the start of that opportunity until today
# 4) Join the date sequence with the subsetted data
# 5) Fill in the fields using the last observed data point
# 6) Add new subsetted dataframe to the list of dataframes
# 7) Row bind the list of dataframes to get 1 dataframe
salesforce_df_opp_list <- list()
opp_counter <- 0
for(i in opportunity_list) {
name <- paste0('opp', opp_counter, sep = '')
subset_data <- subset(opportunities, opportunity_id == i)
subset_date_seq <- data.frame(seq(as.Date(min(subset_data$created)),Sys.Date(),1))
names(subset_date_seq) <- 'created'
subset_data$created <- as.Date(subset_data$created)
subset_df <- left_join(subset_date_seq, subset_data, by=c("created"))
subset_df <- subset_df %>% fill(account_name, name, opportunity_id, opportunity_history_id, stage_name, lead_source, opp_type, opened_date, close_date, invite_date, rsvp_date, checkin_date, is_closed, is_won, attribution_type)
subset_df$amount <- na.locf(subset_df$amount, na.rm = FALSE)
subset_df$probability <- na.locf(subset_df$probability, na.rm = FALSE)
subset_df$expected_revenue <- na.locf(subset_df$expected_revenue, na.rm = FALSE)
salesforce_df_opp_list[[name]] <- subset_df
opp_counter = opp_counter + 1
}
salesforce_df <- do.call("rbind", salesforce_df_opp_list)
#Filling in na's with 0's and getting missing expected revenue
salesforce_df$amount[is.na(salesforce_df$amount)] <- 0
salesforce_df$probability[is.na(salesforce_df$probability)] <- 0
salesforce_df$expected_revenue[is.na(salesforce_df$expected_revenue)] <- salesforce_df$amount[is.na(salesforce_df$expected_revenue)] * salesforce_df$probability[is.na(salesforce_df$expected_revenue)]
#Join the closed opportunities df to get the opp_stage field.
salesforce_df <- left_join(salesforce_df, closed_opps[,c('opportunity_history_id', 'opp_stage')], by=c("opportunity_history_id"))
#If na then then opp is not closed at that point in time.  Thus mark it as open.
salesforce_df$opp_stage[is.na(salesforce_df$opp_stage)] <- 'Open'
salesforce_df <- salesforce_df[with(salesforce_df, order(-expected_revenue)),]
#Open Opps
open_opps <- data.frame(subset(salesforce_df, opp_stage == 'Open'))
open_opps$attended <- ifelse(is.na(open_opps$checkin_date), 'No', 'Yes')
#Create an aggregated view for graphing purposes
agg_view <- salesforce_df %>%
group_by(created, rsvp_date, opp_type, attribution_type, opp_stage) %>%
summarise(expected_revenue = sum(expected_revenue),
new_count = length(unique(name[attribution_type == 'New'])),
influence_count = length(unique(name[attribution_type == 'Influenced'])),
open_count = sum(opp_stage == 'Open'),
closed_won_count = sum(opp_stage == 'Closed Won'),
closed_lost_count = sum(opp_stage == 'Closed Lost'))
agg_view <- data.frame(subset(agg_view, created > event_info$event_start - 150))
data_lst <<- list(salesforce_df, closed_won_opps, closed_lost_opps, open_opps, agg_view, event_info)
return(data_lst)
}
eventID <- 2805226
global_func(event_query(eventID), salesforce_query(event_query(eventID), eventID))
data.frame(1, 2)
library(googleVis)
library(ggvis)
library(plotly)
library(scales)
library(dplyr)
library(ggplot2)
library(plotly)
library(redshift)
library(imputeTS)
library(tidyr)
library(scales)
library(zoo)
library(RColorBrewer)
#Query the Redshift DB
conn <- redshift.connect("jdbc:postgresql://dev-test.cb12gmxpnpv3.us-east-1.redshift.amazonaws.com:5439/splash",
"splash", "S1eKLg5d6HHv2VhLgorBk8pOx4GXIL")
event_id <- readline(prompt = "Input Event ID: ")
#Event Query pulls the guest list and high level information for the event.  Used mainly for the valueboxes - rsvps, check-ins, etc.
event_query <- dbGetQuery(conn,
paste("select
e.title
, e.event_start
, gl.status
, gl.invited_dt as invite_date
, gl.rsvp_yes_dt as rsvp_date
, gl.checkin_dt as checked_in_date
from f_guest_list gl
join events e on e.id = gl.event_id
where gl.event_id =", event_id, "
and gl.is_deleted = 'false'"))
#Salesforce Query pulls the contact, account, and opportunity information for contacts on the guest list.
#Each row represents the opportunity history for each contact-opportunity pair
salesforce_query <- dbGetQuery(conn,
paste("select gl.salesforce_contact_id
, o.name
, a.name as account_name
, o.opportunity_id
, oh.opportunity_history_id
, o.lead_source
, o.type as opp_type
, oh.created
, oh.stage_name
, oh.amount
, oh.probability
, oh.expected_revenue
, o.created as opened_date
, o.close_date
, o.is_closed
, o.is_won
, o.is_deleted
, gl.invited_dt as invite_date
, gl.rsvp_yes_dt as rsvp_date
, gl.checkin_dt as checkin_date
from f_guest_list gl
left join address_book_contacts abc on abc.id = gl.contact_id
join sfdc_splash_contact c on c.email = abc.primary_email
join sfdc_splash_account a on a.account_id = c.account_id
join sfdc_splash_opportunity o on o.account_id = a.account_id
join sfdc_splash_opportunity_history oh on oh.opportunity_id = o.opportunity_id
where gl.event_id =", event_id,"
and gl.is_deleted = 'false'
order by o.name, oh.created"))
dbDisconnect(conn)
#Define functions to determine min and max dates of an opportunity with multiple contacts
my.min <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA)
my.max <- function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA)
#Finding event info
#Event Title used for the header of the dashboard
#Event start used for the first value box as well as plotting
event_info <- unique(event_query[c('title', 'event_start')])
event_info$event_start <- as.Date(event_info$event_start)
salesforce_data <- salesforce_query[with(salesforce_query, order(name,created)),]
shiny::runApp('Documents/demo_day')
data.frame(data.frame("created" = '2017-01-01', "opp_stage" = 'Event Start', "opps" = 1))
event_info = data.frame(data.frame("created" = '2017-01-01', "opp_stage" = 'Event Start', "opps" = 1))
event_info
setwd("~/Documents/AnalyzingBaseballData")
lahman_pitching <- read.csv('/DataFiles/lahman/core/Pitching.csv')
lahman_pitching <- read.csv('~/DataFiles/lahman/core/Pitching.csv')
lahman_pitching <- read.csv('DataFiles/lahman/core/Pitching.csv')
head(lahman_pitching)
gibson_1968 <- subset(lahman_pitching, ((playerID == 'gibsobo01') & (yearID == 1968)))
gibson_1968
print('Bob Gibson completed ' + lahman_pitching$CG / lahman_pitching$GS + '% of the games he started in 1968')
print('Bob Gibson completed ' + as.string(lahman_pitching$CG / lahman_pitching$GS) + '% of the games he started in 1968')
print('Bob Gibson completed ' + as.string(lahman_pitching$CG / lahman_pitching$GS) + '% of the games he started in 1968')
print('Bob Gibson completed ' + as.character(lahman_pitching$CG / lahman_pitching$GS) + '% of the games he started in 1968')
print('Bob Gibson completed ' + as.character(lahman_pitching$CG / lahman_pitching$GS) + '% of the games he started in 1968')
print('Bob Gibson completed ' + as.character(gibson_1968$CG / gibson_1968$GS) + '% of the games he started in 1968')
gibson_1968$CG
as.character(gibson_1968$CG)
as.character(gibson_1968$CG) + ' hello'
as.character(gibson_1968$CG) + ' hello'
print(paste0('Bob Gibson completed ', gibson_1968$CG / gibson_1968$GS,'% of the games he started in 1968'))
print(paste0('Bob Gibson completed ', round(gibson_1968$CG / gibson_1968$GS * 100, 0), '% of the games he started in 1968'))
round(gibson_1968$SO / gibson_1968$BB, 0)
round(gibson_1968$SO / gibson_1968$BB, 1)
print(paste0(round(gibson_1968$SO / gibson_1968$BB, 1), 'Strikeouts to 1 Walk'))
print(paste0(round(gibson_1968$SO / gibson_1968$BB, 1), ' Strikeouts to 1 Walk'))
print(gibson_1968$IPouts / 3)
print(round(gibson_1968$IPouts / 3, 1)
print(round(gibson_1968$IPouts / 3, 1))
print(round(gibson_1968$IPouts / 3, 2))
print(paste0(round(gibson_1968$IPouts / 3, 2), 'innings'))
print(paste0(round(gibson_1968$IPouts / 3, 2), ' Innings'))
print(paste0(round((gibson_1968$H + gibson_1968$BB) / (gibson_1968$IPouts / 3), 2), ' Innings'))
print(paste0(round((gibson_1968$H + gibson_1968$BB) / (gibson_1968$IPouts / 3), 2), ' WHIP'))
source("parse.retrosheet.pbp.R")
setwd("~/Documents/AnalyzingBaseballData/download.folder")
source("parse.retrosheet.pbp.R")
source("parse.retrosheet.pbp.R")
setwd("~/Documents/AnalyzingBaseballData/download.folder/unzipped")
source("parse.retrosheet.pbp.R")
setwd("~/Documents/AnalyzingBaseballData")
source("parse.retrosheet.pbp.R")
parse.retrosheet.pbp(1950)
parse.retrosheet2.pbp = function(season){
# ADJUSTED FOR MAC -- function will work for WINDOWS and MAC
# download, unzip, append retrosheet data
# assume current directory has a folder download.folder
# download.folder has two subfolders unzipped and zipped
# program cwevent.exe is in unzipped folder (for windows)
download.retrosheet <- function(season){
# get zip file from retrosheet website
download.file(
url=paste("http://www.retrosheet.org/events/", season, "eve.zip", sep="")
, destfile=paste("download.folder", "/zipped/", season, "eve.zip", sep="")
)
}
unzip.retrosheet <- function(season){
#unzip retrosheet files
unzip(paste("download.folder", "/zipped/", season, "eve.zip", sep=""),
exdir=paste("download.folder", "/unzipped", sep=""))
}
create.csv.file=function(year){
# http://chadwick.sourceforge.net/doc/cwevent.html#cwtools-cwevent
# shell("cwevent -y 2000 2000TOR.EVA > 2000TOR.bev")
wd = getwd()
setwd("download.folder/unzipped")
if (.Platform$OS.type == "unix"){
system(paste(paste("cwevent -y", year, "-f 0-96"),
paste(year,"*.EV*",sep=""),
paste("> all", year, ".csv", sep="")))} else {
shell(paste(paste("cwevent -y", year, "-f 0-96"),
paste(year,"*.EV*",sep=""),
paste("> all", year, ".csv", sep="")))
}
setwd(wd)
}
create.csv.roster = function(year){
# creates a csv file of the rosters
filenames <- list.files(path = "download.folder/unzipped/")
filenames.roster =
subset(filenames, substr(filenames, 4, 11)==paste(year,".ROS",sep=""))
read.csv2 = function(file)
read.csv(paste("download.folder/unzipped/", file, sep=""),header=FALSE)
R = do.call("rbind", lapply(filenames.roster, read.csv2))
names(R)[1:6] = c("Player.ID", "Last.Name", "First.Name",
"Bats", "Pitches", "Team")
wd = getwd()
setwd("download.folder/unzipped")
write.csv(R, file=paste("roster", year, ".csv", sep=""))
setwd(wd)
}
cleanup = function(){
# removes retrosheet files not needed
wd = getwd()
setwd("download.folder/unzipped")
if (.Platform$OS.type == "unix"){
system("rm *.EVN")
system("rm *.EVA")
system("rm *.ROS")
system("rm TEAM*")} else {
shell("del *.EVN")
shell("del *.EVA")
shell("del *.ROS")
shell("del TEAM*")
}
setwd(wd)
setwd("download.folder/zipped")
if (.Platform$OS.type == "unix"){
system("rm *.zip")} else {
shell("del *.zip")
}
setwd(wd)
}
download.retrosheet(season)
unzip.retrosheet(season)
create.csv.file(season)
create.csv.roster(season)
cleanup()
}
parse.retrosheet2.pbp(1950)
devtools::install_github("cpsievert/chadwick")
parse.retrosheet2.pbp(1950)
library(devtools)
source_gist("https://gist.github.com/bayesball/8892981",
filename="parse.retrosheet2.pbp.R")
parse.retrosheet2.pbp(2016)
setwd("download.folder/unzipped")
dir()
parse.retrosheet2.pbp(2015)
setwd("~/Documents/AnalyzingBaseballData")
parse.retrosheet2.pbp(2015)
parse.retrosheet2.pbp(2017)
parse.retrosheet2.pbp(2014)
parse.retrosheet2.pbp(2013)
parse.retrosheet2.pbp(2012)
parse.retrosheet2.pbp(2011)
parse.retrosheet2.pbp(2010)
parse.retrosheet2.pbp(2009)
parse.retrosheet2.pbp(2008)
parse.retrosheet2.pbp(2007)
parse.retrosheet2.pbp(2006)
parse.retrosheet2.pbp(2005)
parse.retrosheet2.pbp(2004)
parse.retrosheet2.pbp(2003)
parse.retrosheet2.pbp(2002)
parse.retrosheet2.pbp(2001)
parse.retrosheet2.pbp(2000)
parse.retrosheet2.pbp(1998)
parse.retrosheet2.pbp(1997)
parse.retrosheet2.pbp(1996)
parse.retrosheet2.pbp(1995)
parse.retrosheet2.pbp(1994)
parse.retrosheet2.pbp(1993)
parse.retrosheet2.pbp(1992)
parse.retrosheet2.pbp(1991)
parse.retrosheet2.pbp(1990)
parse.retrosheet2.pbp(1989)
parse.retrosheet2.pbp(1988)
parse.retrosheet2.pbp(1987)
parse.retrosheet2.pbp(1986)
parse.retrosheet2.pbp(1985)
parse.retrosheet2.pbp(1984)
parse.retrosheet2.pbp(1983)
parse.retrosheet2.pbp(1982)
parse.retrosheet2.pbp(1981)
parse.retrosheet2.pbp(198)
parse.retrosheet2.pbp(1980)
